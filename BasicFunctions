import collections 
import re

########  TO BE CLEANED UP, Functions to be assigned to "GRID" Object
def make_rows(row_dict):
  for row in range(1,10):
		rows[row] = []
		for col in range(1,10):
			rows[row].append((row,col))

def make_cols(col_dict):
	for col in range(1,10):
		cols[col] = []
		for row in range(1,10):
			cols[col].append((row,col))

def populate_Vals(dict_x):
	'''
	initializes all cells with full range of possible values
	initializes dict of assigned values as empty
	'''
	
	dict_x[1] = [(1,1),(1,2),(1,3),(2,1),(2,2),(2,3),(3,1),(3,2),(3,3)]
	dict_x[4] = [(4,1),(4,2),(4,3),(5,1),(5,2),(5,3),(6,1),(6,2),(6,3)]
	dict_x[7] = [(7,1),(7,2),(7,3),(8,1),(8,2),(8,3),(9,1),(9,2),(9,3)]
	dict_x[2] = [(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)]
	dict_x[5] = [(4,4),(4,5),(4,6),(5,4),(5,5),(5,6),(6,4),(6,5),(6,6)]
	dict_x[8] = [(7,4),(7,5),(7,6),(8,4),(8,5),(8,6),(9,4),(9,5),(9,6)]
	dict_x[3] = [(1,7),(1,8),(1,9),(2,7),(2,8),(2,9),(3,7),(3,8),(3,9)]
	dict_x[6] = [(4,7),(4,8),(4,9),(5,7),(5,8),(5,9),(6,7),(6,8),(6,9)]
	dict_x[9] = [(7,7),(7,8),(7,9),(8,7),(8,8),(8,9),(9,7),(9,8),(9,9)]
	possVals = dict()
	assignedVals = dict()
	for x in dict_x.keys():
		for y in dict_x[x]:
			possVals[y] = list(range(1,10))
			assignedVals[y] = int()
	return possVals, assignedVals
	
def get_square(coord,csqs):
	'''
	takes (x,y) coordinates of a cell, returns the square 
	it's a member of. 
	csqs is corresp_sqs dict
	'''
	for x in csqs:
		if coord in csqs[x]:
			return csqs[x]

def get_row(coord,rows):
	for x in rows:
		if coord in rows[x]:
			return rows[x]

def get_col(coord,cols):
	for x in cols:
		if coord in cols[x]:
			return cols[x]

def get_sthg(coord,which_dict):
	for x in which_dict:
		if coord in which_dict[x]:
			y = [x for x in which_dict[x]]
			return y

def remove_mates(coord,num,which_dict,possVals):
	mates = get_sthg(coord,which_dict)
	mates.remove(coord)
	for x in mates:
		if num in possVals[x]:
			possVals[x].remove(num)

def assign(coord,num,avals,possVals,csqs,rows,cols):
	'''
	#assigns a value (num) to a cell at given location (coord)
	#subsequently removes num from poss values in row, column
	'''
	aVals[coord] = num
	possVals[coord] = []
	remove_mates(coord,num,csqs,possVals)
	remove_mates(coord,num,rows,possVals)
	remove_mates(coord,num,cols,possVals)

def get_poss(coord,pvals):
	return pvals[coord]

def print_puzzle(assignedVals):
	'''
	 prints current state of the puzzle
	 as a 9 x 9 grid
	'''
	print " __________________________________"
	for x in range(1,10):
		print get_row_print(x,assignedVals)
	print " ----------------------------------"

def get_row_print(num,assignedVals):
	row = "|%s ," % (assignedVals[num,1])
	for x in range(2,10):
		row+=" %s ," % (assignedVals[num,x])
	row = row.rstrip(",")
	row += "|"
	row = re.sub('0'," ",row)
	return row


########### Functions for 'Solver' Class  go here

def only_in(which_dict,which_item,aVals,pVals,csqs,rows,cols):
	#
	# checks to see whether there's some val V
	# s.t. V can only be assigned to one cell in 
	# some element (be it local square, row, or col - specified
	# by 'which_dict')
	#
	possList = []
	for cell in which_dict[which_item]:
		possList += get_poss(cell,pVals)
	dupes = [x for x, y in collections.Counter(possList).items() if y > 1]
	possList = [x for x in possList if x not in dupes]
	for x in possList:
		## find which square val belongs to
		for cell in which_dict[which_item]:
				# assign value to that cell
				if x in pVals[cell]:
					assign(cell,x,aVals,pVals,csqs,rows,cols)

def run_solver(aVals,pVals,corresp_sqs,rows,cols):
	for x in range(1,10):
		only_in(corresp_sqs,x,aVals,pVals,corresp_sqs,rows,cols)
		only_in(rows,x,aVals,pVals,corresp_sqs,rows,cols)
		only_in(cols,x,aVals,pVals,corresp_sqs,rows,cols)
